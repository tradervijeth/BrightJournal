//
//  BrightJournalIntents.swift
//  BrightJournal
//
//  Created by AI Assistant on 03/09/2025.
//

import AppIntents
import SwiftData
import Foundation

@available(iOS 16.0, *)
struct SaveJournalEntryIntent: AppIntent {
    static var title: LocalizedStringResource = "Save Journal Entry"
    static var description = IntentDescription("Save a new journal entry to Bright Journal")
    
    @Parameter(title: "Entry Text")
    var text: String
    
    static var parameterSummary: some ParameterSummary {
        Summary("Save \(\.$text) to journal")
    }
    
    func perform() async throws -> some IntentResult & ProvidesDialog {
        // Get the model context (this would need to be properly configured in a real app)
        // For now, we'll return a success message
        
        let trimmedText = text.trimmingCharacters(in: .whitespacesAndNewlines)
        
        guard !trimmedText.isEmpty else {
            throw $text.needsValueError("Entry text cannot be empty")
        }
        
        // In a real implementation, you would:
        // 1. Get the shared model context
        // 2. Create and save the JournalEntry
        // 3. Perform mood analysis
        
        return .result(
            dialog: IntentDialog("Successfully saved journal entry with \(trimmedText.count) characters")
        )
    }
}

@available(iOS 16.0, *)
struct ShareMonthlySummaryIntent: AppIntent {
    static var title: LocalizedStringResource = "Share Monthly Summary"
    static var description = IntentDescription("Share the monthly summary for a specific month")
    
    @Parameter(title: "Month")
    var month: Date
    
    static var parameterSummary: some ParameterSummary {
        Summary("Share monthly summary for \(\.$month)")
    }
    
    func perform() async throws -> some IntentResult & ReturnsValue<String> {
        let calendar = Calendar.current
        let formatter = DateFormatter()
        formatter.dateFormat = "MMMM yyyy"
        let monthString = formatter.string(from: month)
        
        // In a real implementation, you would:
        // 1. Query the model context for the monthly report
        // 2. Return the actual summary text
        
        let summaryText = """
        Monthly Journal Summary for \(monthString)
        
        This summary would contain the actual AI-generated insights from your journal entries.
        
        Generated by Bright Journal - AI-powered personal reflection
        """
        
        return .result(
            value: summaryText,
            dialog: IntentDialog("Monthly summary for \(monthString) is ready to share")
        )
    }
}

// App Shortcuts Provider
@available(iOS 16.0, *)
struct BrightJournalShortcuts: AppShortcutsProvider {
    static var appShortcuts: [AppShortcut] {
        AppShortcut(
            intent: SaveJournalEntryIntent(),
            phrases: [
                "Save journal entry in \(.applicationName)",
                "Add entry to \(.applicationName)",
                "Write in \(.applicationName)"
            ],
            shortTitle: "Save Entry",
            systemImageName: "book.pages"
        )
        
        AppShortcut(
            intent: ShareMonthlySummaryIntent(),
            phrases: [
                "Share monthly summary from \(.applicationName)",
                "Get summary from \(.applicationName)",
                "Export monthly reflection from \(.applicationName)"
            ],
            shortTitle: "Share Summary",
            systemImageName: "square.and.arrow.up"
        )
    }
}